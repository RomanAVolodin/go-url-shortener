// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: internal/shortener/proto/shortener.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Shortener_CreateURL_FullMethodName          = "/proto.Shortener/CreateURL"
	Shortener_RetrieveURL_FullMethodName        = "/proto.Shortener/RetrieveURL"
	Shortener_CreateMultipleURLs_FullMethodName = "/proto.Shortener/CreateMultipleURLs"
	Shortener_GetUsersRecords_FullMethodName    = "/proto.Shortener/GetUsersRecords"
	Shortener_DeleteRecords_FullMethodName      = "/proto.Shortener/DeleteRecords"
	Shortener_GetServiceStats_FullMethodName    = "/proto.Shortener/GetServiceStats"
	Shortener_PingDatabase_FullMethodName       = "/proto.Shortener/PingDatabase"
)

// ShortenerClient is the client API for Shortener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerClient interface {
	CreateURL(ctx context.Context, in *CreateShortURLSimpleRequest, opts ...grpc.CallOption) (*CreateShortURLSimpleResponse, error)
	RetrieveURL(ctx context.Context, in *RetrieveShortURLByIDRequest, opts ...grpc.CallOption) (*RetrieveShortURLByIDResponse, error)
	CreateMultipleURLs(ctx context.Context, in *CreateMultipleRequest, opts ...grpc.CallOption) (*CreateMultipleResponse, error)
	GetUsersRecords(ctx context.Context, in *GetUsersRecordsRequest, opts ...grpc.CallOption) (*GetUsersRecordsResponse, error)
	DeleteRecords(ctx context.Context, in *DeleteRecordsRequest, opts ...grpc.CallOption) (*DeleteRecordsResponse, error)
	GetServiceStats(ctx context.Context, in *GetServiceStatsRequest, opts ...grpc.CallOption) (*GetServiceStatsResponse, error)
	PingDatabase(ctx context.Context, in *PingDbRequest, opts ...grpc.CallOption) (*PingDbResponse, error)
}

type shortenerClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenerClient(cc grpc.ClientConnInterface) ShortenerClient {
	return &shortenerClient{cc}
}

func (c *shortenerClient) CreateURL(ctx context.Context, in *CreateShortURLSimpleRequest, opts ...grpc.CallOption) (*CreateShortURLSimpleResponse, error) {
	out := new(CreateShortURLSimpleResponse)
	err := c.cc.Invoke(ctx, Shortener_CreateURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) RetrieveURL(ctx context.Context, in *RetrieveShortURLByIDRequest, opts ...grpc.CallOption) (*RetrieveShortURLByIDResponse, error) {
	out := new(RetrieveShortURLByIDResponse)
	err := c.cc.Invoke(ctx, Shortener_RetrieveURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) CreateMultipleURLs(ctx context.Context, in *CreateMultipleRequest, opts ...grpc.CallOption) (*CreateMultipleResponse, error) {
	out := new(CreateMultipleResponse)
	err := c.cc.Invoke(ctx, Shortener_CreateMultipleURLs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetUsersRecords(ctx context.Context, in *GetUsersRecordsRequest, opts ...grpc.CallOption) (*GetUsersRecordsResponse, error) {
	out := new(GetUsersRecordsResponse)
	err := c.cc.Invoke(ctx, Shortener_GetUsersRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) DeleteRecords(ctx context.Context, in *DeleteRecordsRequest, opts ...grpc.CallOption) (*DeleteRecordsResponse, error) {
	out := new(DeleteRecordsResponse)
	err := c.cc.Invoke(ctx, Shortener_DeleteRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetServiceStats(ctx context.Context, in *GetServiceStatsRequest, opts ...grpc.CallOption) (*GetServiceStatsResponse, error) {
	out := new(GetServiceStatsResponse)
	err := c.cc.Invoke(ctx, Shortener_GetServiceStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) PingDatabase(ctx context.Context, in *PingDbRequest, opts ...grpc.CallOption) (*PingDbResponse, error) {
	out := new(PingDbResponse)
	err := c.cc.Invoke(ctx, Shortener_PingDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerServer is the server API for Shortener service.
// All implementations must embed UnimplementedShortenerServer
// for forward compatibility
type ShortenerServer interface {
	CreateURL(context.Context, *CreateShortURLSimpleRequest) (*CreateShortURLSimpleResponse, error)
	RetrieveURL(context.Context, *RetrieveShortURLByIDRequest) (*RetrieveShortURLByIDResponse, error)
	CreateMultipleURLs(context.Context, *CreateMultipleRequest) (*CreateMultipleResponse, error)
	GetUsersRecords(context.Context, *GetUsersRecordsRequest) (*GetUsersRecordsResponse, error)
	DeleteRecords(context.Context, *DeleteRecordsRequest) (*DeleteRecordsResponse, error)
	GetServiceStats(context.Context, *GetServiceStatsRequest) (*GetServiceStatsResponse, error)
	PingDatabase(context.Context, *PingDbRequest) (*PingDbResponse, error)
	mustEmbedUnimplementedShortenerServer()
}

// UnimplementedShortenerServer must be embedded to have forward compatible implementations.
type UnimplementedShortenerServer struct {
}

func (UnimplementedShortenerServer) CreateURL(context.Context, *CreateShortURLSimpleRequest) (*CreateShortURLSimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateURL not implemented")
}
func (UnimplementedShortenerServer) RetrieveURL(context.Context, *RetrieveShortURLByIDRequest) (*RetrieveShortURLByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveURL not implemented")
}
func (UnimplementedShortenerServer) CreateMultipleURLs(context.Context, *CreateMultipleRequest) (*CreateMultipleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMultipleURLs not implemented")
}
func (UnimplementedShortenerServer) GetUsersRecords(context.Context, *GetUsersRecordsRequest) (*GetUsersRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersRecords not implemented")
}
func (UnimplementedShortenerServer) DeleteRecords(context.Context, *DeleteRecordsRequest) (*DeleteRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecords not implemented")
}
func (UnimplementedShortenerServer) GetServiceStats(context.Context, *GetServiceStatsRequest) (*GetServiceStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceStats not implemented")
}
func (UnimplementedShortenerServer) PingDatabase(context.Context, *PingDbRequest) (*PingDbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingDatabase not implemented")
}
func (UnimplementedShortenerServer) mustEmbedUnimplementedShortenerServer() {}

// UnsafeShortenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerServer will
// result in compilation errors.
type UnsafeShortenerServer interface {
	mustEmbedUnimplementedShortenerServer()
}

func RegisterShortenerServer(s grpc.ServiceRegistrar, srv ShortenerServer) {
	s.RegisterService(&Shortener_ServiceDesc, srv)
}

func _Shortener_CreateURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortURLSimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).CreateURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_CreateURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).CreateURL(ctx, req.(*CreateShortURLSimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_RetrieveURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveShortURLByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).RetrieveURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_RetrieveURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).RetrieveURL(ctx, req.(*RetrieveShortURLByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_CreateMultipleURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMultipleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).CreateMultipleURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_CreateMultipleURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).CreateMultipleURLs(ctx, req.(*CreateMultipleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetUsersRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetUsersRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_GetUsersRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetUsersRecords(ctx, req.(*GetUsersRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_DeleteRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).DeleteRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_DeleteRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).DeleteRecords(ctx, req.(*DeleteRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetServiceStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetServiceStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_GetServiceStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetServiceStats(ctx, req.(*GetServiceStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_PingDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingDbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).PingDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_PingDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).PingDatabase(ctx, req.(*PingDbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shortener_ServiceDesc is the grpc.ServiceDesc for Shortener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shortener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Shortener",
	HandlerType: (*ShortenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateURL",
			Handler:    _Shortener_CreateURL_Handler,
		},
		{
			MethodName: "RetrieveURL",
			Handler:    _Shortener_RetrieveURL_Handler,
		},
		{
			MethodName: "CreateMultipleURLs",
			Handler:    _Shortener_CreateMultipleURLs_Handler,
		},
		{
			MethodName: "GetUsersRecords",
			Handler:    _Shortener_GetUsersRecords_Handler,
		},
		{
			MethodName: "DeleteRecords",
			Handler:    _Shortener_DeleteRecords_Handler,
		},
		{
			MethodName: "GetServiceStats",
			Handler:    _Shortener_GetServiceStats_Handler,
		},
		{
			MethodName: "PingDatabase",
			Handler:    _Shortener_PingDatabase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/shortener/proto/shortener.proto",
}
